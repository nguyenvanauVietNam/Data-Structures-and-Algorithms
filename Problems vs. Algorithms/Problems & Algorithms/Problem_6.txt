Problem 6: Unsorted Integer Array
Max and Min in a Unsorted Array
In this problem, we will look for smallest and largest integer from a list of unsorted integers. The code should run in O(n) time. Do not use Python's inbuilt functions to find min and max.

Bonus Challenge: Is it possible to find the max and min in a single traversal?
Ananlysis:

The given algorithm finds the minimum and maximum values in a list of integers. Here's the analysis of its time complexity in English:
1.	The algorithm starts by checking if the input list, ints, is empty. If it is empty, the function returns None. This step takes constant time, O(1), as it involves a single if statement.
2.	If the input list is not empty, the algorithm initializes two variables, min_val and max_val, to the first element of the list. This initialization step is also constant time, O(1).
3.	Next, the algorithm iterates through each element in the input list, ints, and updates min_val and max_val accordingly. This loop runs for each element in the list, resulting in a linear time complexity, O(n), where 'n' is the number of elements in the input list.
4.	Finally, the algorithm returns a tuple containing the minimum and maximum values found, which is a constant-time operation, O(1).
The overall time complexity of this algorithm is O(n) because the loop is the dominant factor, and it iterates through the list once to find the minimum and maximum values.

