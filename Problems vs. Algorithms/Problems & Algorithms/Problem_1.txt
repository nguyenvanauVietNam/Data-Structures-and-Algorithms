Problem 1: Square Root of an Integer

Find the square root of the integer without using any Python library. You have to find the floor value of the square root.
For example if the given number is 16, then the answer would be 4.
If the given number is 27, the answer would be 5 because sqrt(5) = 5.196 whose floor value is 5.
The expected time complexity is O(log(n))

Ananlysis:
The above code implements the algorithm to find the square root of a positive integer number using the binary search method.
Let's analyze each line of code to understand how the algorithm works and its complexity:

1.	if number == 0 or number == 1:
	a.	Check if number is 0 or 1.
	b.	This is a basic case where if number is 0 or 1, the square root of it is number.
	c.	Complexity: O(1), as it only requires one check of number.
2.	left, right = 1, number
	a.	Initialize two variables, left and right, where in this case, left is set to 1 and right is set to number.
	b.	left and right are two indices within the binary search range to determine the square root.
	c.	Complexity: O(1).
3.	result = 0
	a.	Initialize the result variable to store a temporary result.
	b.	Initially, result is set to 0.
	c.	Complexity: O(1).
4.	while left <= right:
	a.	Start a while loop with the condition that left should not exceed right.
	b.	This loop continues until left becomes greater than right, which means the square root has been found or cannot be found.
5.	mid = (left + right) // 2
	a.	Calculate the average value mid between left and right.
	b.	This is a crucial step in the binary search algorithm.
	c.	Complexity: O(1).
6.	if mid * mid == number:
	a.	Check if the square of mid is equal to number.
	b.	If so, mid is the square root of number, and we return mid.
	c.	Complexity: O(1).
7.	elif mid * mid < number:
	a.	If the square of mid is less than number, we update left = mid + 1 and store the value of mid in result as a temporary result.
	b.	This is a step of advancing within the search range.
	c.	Complexity: O(1).
8.	else:
	a.	In the remaining case, where the square of mid is greater than number, we update right = mid - 1 to narrow down the search range.
	b.	Complexity: O(1).
9.	Finally, after the loop is finished, we return result as the nearest square root of number.
	a.	Complexity: O(1).
10.	In summary, the complexity of this square root finding algorithm is O(log(n)), where n is the value of number.
The search range is halved in each step until we find the result or determine it's not possible.