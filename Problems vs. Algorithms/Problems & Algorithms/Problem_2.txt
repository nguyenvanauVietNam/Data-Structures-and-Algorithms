Problem 2: Search in a Rotated Sorted Array

You are given a sorted array which is rotated at some random pivot point.
Example: [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]
You are given a target value to search. If found in the array return its index, otherwise return -1.
You can assume there are no duplicates in the array and your algorithm's runtime complexity must be in the order of O(log n).

Ananlysis:
To analyze the complexity of the rotated_array_search algorithm, we will examine each part of the code and consider the time and space complexity of each part:
	1.	Initializing left and right variables: This only takes a constant number of steps, as it involves assigning the initial values to the beginning and end of the array.
	Therefore, the time complexity is O(1), and the space complexity is O(1).
	2.	The while loop: This loop continues to run until left is no longer less than or equal to right. In each iteration, the algorithm performs a fixed number of operations, including calculating the middle value mid and several comparisons and assignments.
	Therefore, the time complexity of this loop is O(log n), where "n" is the length of the input_list.
	3.	Within each loop iteration, there are a number of comparisons and assignments to check and update left and right.
	However, the total number of comparisons and assignments within the loop does not exceed a constant and is dependent on the size of the array. Thus, the time complexity is O(log n).
In summary, the time complexity of the rotated_array_search algorithm is O(log n), where "n" is the length of the input_list. The space complexity is O(1) because the algorithm does not use additional memory in proportion to the input data size.
Comparing it to the linear_search algorithm you provided, the rotated_array_search algorithm has a better time complexity (O(log n) compared to O(n) of the linear search algorithm).
